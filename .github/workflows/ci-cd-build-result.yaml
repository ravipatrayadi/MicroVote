name: Build results

# Trigger the workflow on any push to the 'main' branch or on pull requests targeting 'main'
on:
  push:
    branches:
      - "main" # Trigger on push to the 'main' branch
    paths:
      - "results/**" # Trigger if files in the 'results' directory are modified
      - ".github/workflows/ci-cd-build-result.yaml" # Trigger if this workflow file is modified

  pull_request:
    branches:
      - "main" # Trigger on pull request targeting the 'main' branch
    paths:
      - "results/**" # Trigger if files in the 'results' directory are modified
      - ".github/workflows/ci-cd-build-result.yaml" # Trigger if this workflow file is modified

jobs:
  build:
    runs-on: ubuntu-latest # The build job will run on the latest version of Ubuntu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Check out the repository's code

      - name: Run docker-compose up
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "docker-compose.yaml" # Specify the Docker Compose file to use
          up-flags: "--abort-on-container-exit --remove-orphans"
          # Flags:
          # --abort-on-container-exit: Stop all containers if one stops
          # --remove-orphans: Remove containers not defined in the Compose file
          cwd: /home/runner/work/My-Polling-App/My-Polling-App/results
          # Set the working directory to where the Docker Compose file is located

  docker:
    runs-on: ubuntu-latest # The Docker job will run on the latest version of Ubuntu
    needs: build # This job depends on the 'build' job; it will run after 'build' completes

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Check out the repository's code

      # Step 1: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Set up Docker Buildx for building multi-platform images

      # Step 2: Log in to Docker Hub using credentials stored in GitHub Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username from GitHub Secrets
          password: ${{ secrets.DOCKER_TOKEN }} # Docker Hub password from GitHub Secrets

      # Step 3: Build and push Docker image to Docker Hub
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./results # The context directory containing the Dockerfile and build artifacts
          file: results/Dockerfile # Specify the Dockerfile path
          platforms: linux/amd64,linux/arm64,linux/arm/v7 # Target platforms for the Docker image
          push: true # Push the built image to Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/my-polling-app:result-${{ github.run_id }}
          # Tag the Docker image with the username and GitHub run ID for uniqueness

  update-image-tag-in-helm-values:
    runs-on: ubuntu-latest # Specifies the operating system for the job

    needs: docker # Indicates that this job depends on the successful completion of the 'docker' job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }} # Uses a secret token for accessing the repository

      - name: Update image tag in Helm chart
        # Use sed to update the image tag in the Helm values.yaml file with the GitHub run ID
        run: |
          sed -i '/deployment3:/,/tag:/s/tag: .*/tag: '"${{ github.run_id }}"'/' specifications/values.yaml

      - name: Commit and push changes
        run: |
          git config --global user.email "pranayreddy.k12@gmail.com"
          git config --global user.name "PranayReddy-K"

          git add specifications/values.yaml

          cat specifications/values.yaml

          git pull

          git commit -m "feat: Update image tag in Helm chart to GitHub run ID ${{ github.run_id }}"

          git push
